import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class SyncLockTest {

	private static int value;
	private static int threadNumInPool = 4;
	private static int[] cntArray = new int[threadNumInPool];
	private static ExecutorService executorService = Executors.newFixedThreadPool(threadNumInPool);
	private static int num = 10000000;

	public static class doItInThread implements Runnable {
		long begin;
		int threadCnt;

		doItInThread(long b, int t) {
			begin = b;
			threadCnt = t;
		}

		@Override
		public void run() {
			for (int i = 0; i < num/threadCnt; i++) {
				executorService.execute(new Runnable() {
					@Override
					public void run() {
						int v = 0;
						try {
							v = incrementAndGet();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						if (v == num) {
							long end = System.currentTimeMillis();
							System.out.println("SyncLockTest ~ value: " + v + "  times: " + (end - begin) + "ms\n");
							System.out.println("CntArray =" + Arrays.toString(cntArray));
							System.exit(0);
						}
					}
				});
			}
		}
	}

	public static void main(String[] args) {
		String mainThreadName = Thread.currentThread().getName();
		System.out.println("MainThreadName = " + mainThreadName + "\n");
		long begin = System.currentTimeMillis();
		int threadCnt = 2;
		Thread t1 = new Thread(new doItInThread(begin, threadCnt));
		Thread t2 = new Thread(new doItInThread(begin, threadCnt));
		t1.start();
		t2.start();
	}

	private static synchronized int incrementAndGet() throws InterruptedException {
		String threadName = Thread.currentThread().getName();
		if(value % 2000000 == 0) {
			System.out.println("IncrementAndGet ~ ThreadName = " + threadName);
			System.out.println("IncrementAndGet ~ value = " + value + "\n");
		}
		String tmp = threadName.substring(threadName.length()-1);
		int idx = Integer.parseInt(tmp);
		cntArray[idx-1]++;
		// Thread.sleep(1);
		return ++value;
	}

}

